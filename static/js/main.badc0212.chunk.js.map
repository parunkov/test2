{"version":3,"sources":["components/Foods/Food.jsx","components/Foods/Foods.jsx","utils/object-helpes.js","redux/foods-reducer.js","components/Foods/FoodsContainer.jsx","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["num2str","num","textForms","n","Math","abs","n1","Food","id","title","portions","mouses","like","weight","text","selected","disabled","toggleSelected","useState","hovered","setHovered","className","onClick","onMouseEnter","onMouseLeave","trunc","formatNumber","Foods","props","foodsElements","data","map","food","key","updateObjectInArray","items","itemId","objPropName","newObjProps","u","initialState","foodsReducer","state","action","type","connect","foods","reducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","FoodsContainer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.badc0212.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Food.scss';\nimport { formatNumber } from 'accounting';\n// import cn from 'classnames';\n\nconst num2str = function (num, textForms) {\n  const n = Math.abs(num) % 100;\n  const n1 = n % 10;\n  if (n > 10 && n < 20) { return textForms[2]; }\n  if (n1 > 1 && n1 < 5) { return textForms[1]; }\n  if (n1 === 1) { return textForms[0]; }\n  return textForms[2];\n};\n\nconst Food = ({id, title, portions, mouses, like, weight, text, selected, disabled, toggleSelected}) => {\n\tconst [hovered, setHovered] = useState(false);\n\n\treturn (\n\t\t<div className=\"Food\">\n\t\t\t<div \n\t\t\t\tclassName={\"Food__card\" + (\n\t\t\t\tdisabled ? \" Food__card_disabled\" :\n\t\t\t\t\tselected ? \" Food__card_selected\" : \"\"\n\t\t\t\t)} \n\t\t\t\tonClick={() => {\n\t\t\t\t\ttoggleSelected(id, selected);\n\t\t\t\t\tsetHovered(false);\n\t\t\t\t}}\n\t\t\t\tonMouseEnter={() => setHovered(true)}\n\t\t\t\tonMouseLeave={() => setHovered(false)}>\n\t\t\t\t\t<div className=\"Food__descriptionWrapper\">\n\t\t\t\t\t\t{!disabled && selected && hovered ?\n\t\t\t\t\t\t\t<div className=\"Food__description Food__description_hovered\">Котэ не одобряет?</div> :\n\t\t\t\t\t\t\t<div className=\"Food__description\">Сказочное заморское яство</div>}\n\t\t\t\t\t\t<h2 className=\"Food__title\">Нямушка</h2>\n\t\t\t\t\t\t<div className=\"Food__subtitle\">{title}</div>\n\t\t\t\t\t\t<div className=\"Food__portions\">{portions} {num2str(portions, ['порция', 'порции', 'порций'])}</div>\n\t\t\t\t\t\t<div className=\"Food__mouses\">{mouses > 1 && mouses} {num2str(mouses, ['мышь', 'мыши', 'мышей'])} в подарок</div>\n\t\t\t\t\t\t{like && <div className=\"Food__like\">заказчик доволен</div>}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"Food__weightWrapper\">\n\t\t\t\t\t\t<div className=\"Food__weight\">{!(weight - Math.trunc(weight)) ? weight : formatNumber(weight, 1, '',',')}</div>\n\t\t\t\t\t\t<div className=\"Food__weightUnit\">кг</div>\n\t\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t\t{disabled ?\n\t\t\t\t<div className={\"Food__text\" + (disabled && \" Food__text_disabled\")}>Печалька, {title} закончился.</div> :\n\t\t\t\tselected ?\n\t\t\t\t\t<div className=\"Food__text\">{text}</div> :\n\t\t\t\t\t<div className=\"Food__text\">Чего сидишь? Порадуй котэ, <span className=\"Food__textLink\" onClick={() => toggleSelected(id, selected)}>купи.</span></div>\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default Food;","import React from 'react';\nimport Food from './Food';\nimport './Foods.scss';\n\nconst Foods = (props) => {\n\t// console.log(props);\n\tconst foodsElements = props.data.map(food => <Food \n\t\t\tkey={food.id} \n\t\t\tid={food.id}\n\t\t\ttitle={food.title} \n\t\t\tportions={food.portions} \n\t\t\tmouses={food.mouses} \n\t\t\tlike={food.like}\n\t\t\tweight={food.weight}\n\t\t\ttext={food.text}\n\t\t\tselected={food.selected}\n\t\t\tdisabled={food.disabled}\n\t\t\ttoggleSelected={props.toggleSelected}/>);\n\n\treturn (\n\t\t<div className=\"Foods\">\n\t\t\t{foodsElements}\n\t\t</div>\n\t)\n}\n\nexport default Foods;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\n\treturn items.map(u => {\n\t\tif (u[objPropName] === itemId) {\n\t\t\treturn {...u, ...newObjProps}\n\t\t}\n\t\treturn u;\n\t});\n}","import {updateObjectInArray} from '../utils/object-helpes';\n\nconst CHANGE_SELECTED = 'foods/CHANGE_SELECTED';\n\nconst foodsData = [\n\t{\n\t\tid: 1,\n\t\ttitle: 'с фуа-гра',\n\t\tportions: 10,\n\t\tmouses: 1,\n\t\tlike: false,\n\t\tweight: 0.5,\n\t\ttext: 'Печень утки разварная с артишоками.',\n\t\tselected: false,\n\t\tdisabled: false\n\t},\n\t{\n\t\tid: 2,\n\t\ttitle: 'с рыбой',\n\t\tportions: 40,\n\t\tmouses: 2,\n\t\tlike: false,\n\t\tweight: 2,\n\t\ttext: 'Головы щучьи с чесноком да свежайшая сёмгушка.',\n\t\tselected: true,\n\t\tdisabled: false\n\t},\n\t{\n\t\tid: 3,\n\t\ttitle: 'с курой',\n\t\tportions: 100,\n\t\tmouses: 5,\n\t\tlike: true,\n\t\tweight: 5,\n\t\ttext: 'Филе из цыплят с трюфелями в бульоне.',\n\t\tselected: false,\n\t\tdisabled: true\n\t}\n];\n\nconst initialState = {\n\tdata: foodsData\n}\n\nconst foodsReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SELECTED: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdata: updateObjectInArray(state.data, action.id, 'id', {selected: !action.selected})\n\t\t\t}\n\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport const toggleSelected = (id, selected) => ({\n\ttype: CHANGE_SELECTED,\n\tid,\n\tselected\n});\n\nexport default foodsReducer;","import {connect} from 'react-redux';\nimport Foods from './Foods';\nimport {toggleSelected} from '../../redux/foods-reducer';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tdata: state.foods.data\n\t}\n}\n\nexport default connect(mapStateToProps, {toggleSelected})(Foods);","import {createStore, combineReducers} from 'redux';\nimport foodsReducer from './foods-reducer';\n\nconst reducers = combineReducers({\n\tfoods: foodsReducer\n});\n\nconst store = createStore(reducers,\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nexport default store;","import React from 'react';\nimport './App.scss';\nimport FoodsContainer from './components/Foods/FoodsContainer';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <div className=\"App__container\">\n        \t<h1 className=\"App__title\">Ты сегодня покормил кота?</h1>\n          \t<FoodsContainer />\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}